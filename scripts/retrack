#!/usr/bin/env python

import argparse

# TODO if i am also mainly only defining one class per file, 
# should i be importing a different way?
# TODO some way to not always follow package name by module? or is this better practice?
from multi_tracker.delta_video_player import DeltaVideoPlayer
from multi_tracker.image_processing import ContourExtractor
from multi_tracker.data_association import Associator
from multi_tracker.save_data_to_hdf5 import TrajectoryWriter
from multi_tracker.liveviewer import Liveviewer

parser = argparse.ArgumentParser()

# TODO include argument for viewer. anything else?
# which type of tracking pipeline to run? (include roi_finder + multiple pipelines?)

# TODO make image_processor instance w/ parameters loaded in same way as in tracker_simplebuffer

# i think i want to keep most of the __init__s for the classes most of the node files enclose
# mainly to deal with parameter maintenance. is that reasonable?

# TODO if i also want to save parameters in same way as i have been, should i wrap snapshot_params
# and pile up all yaml params here and pass to that, or should i give each class a method
# to return parameters (would work better for default...)
# one point in favor of wrapping:
# -can make use of logic to copy old params over, etc

# TODO how to deal w/ coordination of basename...
# TODO TODO how to deal w/ resetting background. just need to deal w/ whatever influenced tracker (?)


# TODO as_node argument to constructors necessary, or can all ROS stuff be factored into
# __main__? delays? if necessary, maybe don't try to factor ROS stuff (e.g. init_node)
# in to __main__?

# TODO take argument of directory with parameter files
decompressor = DeltaVideoPlayer()
contour_extractor = ContourExtractor()
associator = Associator()
writer = TrajectoryWriter()
viewer = Liveviewer()

# TODO should be able to take bag files or video as input

params = dict()

for frame in video:
    image_processing.process_image()
