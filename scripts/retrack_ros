#!/usr/bin/env bash

# TODO support passing any extra arguments through to (which node though?)
# two separate argument strings, one for each launch file?

# TODO how to / need to expand path?
if [ -d "$1" ]; then
	echo "Argument was a directory."
	INPUT_PATH="$1"
	#OUTPUT_PATH="$(dirname "${INPUT_PATH}")"
elif [ -f "$1" ]; then
	echo "Input was a file. Using parent directory."
	INPUT_PATH="$(dirname "$1")"
	#OUTPUT_PATH="$(dirname "${INPUT_PATH}")"
elif [ -n "${DATA_DIR}" ]; then
	echo "Had DATA_DIR environment variable. Checking there for directory named as argument."
	ID=$1
	INPUT_PATH="${DATA_DIR}/${ID}"
	# TODO maybe retrack everything if ID is not set? everything without hdf5?
	if [ -z "${ID}" ]; then
		echo "Error: must specify subdirectory of DATA_DIR if argument is not otherwise a valid path."
		exit 1
	fi
	# TODO search for any valid directories matching ID in DATA_DIR, excluding retracked dir
	# (so i don't also have to specify parent dir like 20170920)
fi

if ! [ -d "${INPUT_PATH}" ]; then
	echo "Error: input path ${INPUT_PATH} was not a directory."
	exit 1
fi

if [ -z "$2" ]
then
    # TODO might not want to assume output path should have same parent as input
    # how best to support? if env var detected?
    OUTPUT_PATH="${DATA_DIR}/retracked"
else
	OUTPUT_PATH=$2
fi

mkdir -p ${OUTPUT_PATH}

echo "Using input path $INPUT_PATH"
echo "Using output path $OUTPUT_PATH"

# Conversion from relative to absolute path (realpath) needs to happen before cd
# below.
exp_group_name=$(realpath $INPUT_PATH | xargs dirname | xargs basename)
group_tracking_dir=${OUTPUT_PATH}/${exp_group_name}
curr_tracking_output=${OUTPUT_PATH}/$(basename $INPUT_PATH)

if [ -d "${curr_tracking_output}" ]
then
    echo "Tracking output ${curr_tracking_output} already exists! Exiting."
    exit 1
fi

INPUT_PATH=$(realpath $INPUT_PATH)

if [ -z "$3" ]
then
	rate=0.8
else
	rate=$3
fi

# TODO will this fix the problem? why wasn't it necessary before?
# Without this, run_id match problem starting two instances of roslaunch.
roscore &
sleep 3.0
#sleep 1.0
# sleep at all?

# TODO TODO make it so roi_finder/load_rois doesn't need to be set in
# roi_finder.yaml for the below to work? extra arg in the launch file? no
# reason for current behavior...
ROS_HOME=${INPUT_PATH} "roslaunch" multi_tracker play_delta_video.launch rate:=${rate} pause:=False delay:=5 &
sleep 3.0
#sleep 0.5

# Checking for any of a file that is diagnostic of needing to call the
# detect_roi_tracking pipeline.

count=`ls -1 ${INPUT_PATH}/compressor_rois_*.yaml 2>/dev/null | wc -l`
if [ $count != 0 ]
then 
    tracking_launch=detect_roi_tracking.launch
else
    tracking_launch=tracking.launch
fi
echo "Using tracking launch file ${tracking_launch}"

# TODO is the cd really necessary, if setting ROS_HOME?
cd $OUTPUT_PATH
# TODO should rename 'retracking' arg if i don't *always* want to set that when
# retracking (it looks more like it's controlling whether to use
# acquisition-time params vs load local ones, but not clear whether i fully
# implemented the option to load acq-time ones)
# doing this check now to keep K's behavior in first case and my old behavior in
# other case.
if [ $count != 0 ]
then 
    echo "Including retracking:=True, to use acquisition-time parameters"
    ROS_HOME=${OUTPUT_PATH} "roslaunch" multi_tracker ${tracking_launch} viewer:=False tracking_only:=True retracking:=True &
else
    echo "NOT including retracking:=True, to use parameters under ${OUTPUT_PATH}"
    ROS_HOME=${OUTPUT_PATH} "roslaunch" multi_tracker ${tracking_launch} viewer:=False tracking_only:=True &
fi

# see https://unix.stackexchange.com/questions/231676/
# given-two-background-commands-terminate-the-remaining-one-when-either-exits
# TODO so this is waiting for any one of the child processes to exit or what? it
# doesn't seem to be waiting for all of them to finish...
wait -n
pkill -P $$
# Enough time for ROS to shut down, so that the prompt returns to normal when
# this terminates.
# TODO way to do this sleep -> prompt recovering in background?
# (so other commands can proceed, but when left alone, a normal prompt will be
# recovered?) (I suppose stuff getting printed means some stuff may still be
# getting written to, though?)
# TODO TODO rather than sleeping, maybe wait until no files are open in
# directories in question? or (weaker) ROS is down / there is no output?
sleep 4

# TODO if i want to keep doing this, make it work with the way Kristina wants
# this to work...
# make if not exists
#[ -d ${group_tracking_dir} ] || mkdir ${group_tracking_dir}

# TODO TODO TODO fail early if this would collide with a directory already in
# the destination
#echo "Moving tracking output ${curr_tracking_output} to ${group_tracking_dir}"
#mv ${curr_tracking_output} ${group_tracking_dir}

